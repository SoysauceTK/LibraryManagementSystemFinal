using System;
using System.Collections.Generic;
using System.ServiceModel;
using LMS.BorrowingService.Models;

namespace LMS.BorrowingService.Services
{
    /// <summary>
    /// Client proxy class for interacting with the BookStorage service
    /// </summary>
    public class BookServiceClient
    {
        private BookServiceReference.BookServiceClient _client;
        private readonly string _endpoint;
        private bool _useDirectEndpoint;

        /// <summary>
        /// Constructor that uses the configured endpoint from WCF configuration
        /// </summary>
        public BookServiceClient()
        {
            // Initialize the WCF client using the endpoint configuration
            _client = new BookServiceReference.BookServiceClient("BasicHttpBinding_IBookService");
            _useDirectEndpoint = false;
        }

        /// <summary>
        /// Constructor that uses a specified endpoint URL
        /// </summary>
        /// <param name="endpoint">The service endpoint URL</param>
        public BookServiceClient(string endpoint)
        {
            _endpoint = endpoint;
            _useDirectEndpoint = true;
            
            // In a real implementation, this would create a client with a custom endpoint
            // For simplicity in this sample, we'll initialize with the default endpoint
            // and override the URL as needed in the method calls
            _client = new BookServiceReference.BookServiceClient("BasicHttpBinding_IBookService");
        }

        /// <summary>
        /// Gets a book by its ID
        /// </summary>
        /// <param name="id">The book ID to retrieve</param>
        /// <returns>The book if found, null otherwise</returns>
        public Book GetBookById(string id)
        {
            try
            {
                var book = _client.GetBookById(id);
                if (book == null)
                    return null;
                
                return ConvertToLocalBookModel(book);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error getting book by ID: {ex.Message}");
                
                // If this is a sample implementation without service reference
                if (_useDirectEndpoint)
                {
                    // Return a sample book for demonstration
                    return new Book
                    {
                        Id = id,
                        Title = "Sample Book",
                        Author = "Sample Author",
                        CopiesAvailable = 10
                    };
                }
                
                return null;
            }
        }

        /// <summary>
        /// Updates the inventory for a book
        /// </summary>
        /// <param name="update">The inventory update containing the book ID and quantity change</param>
        /// <returns>True if successful, false otherwise</returns>
        public bool UpdateInventory(InventoryUpdate update)
        {
            try
            {
                // Convert to the service reference type
                var serviceUpdate = new BookServiceReference.InventoryUpdate
                {
                    BookId = update.BookId,
                    QuantityChange = update.QuantityChange
                };
                
                return _client.UpdateInventory(serviceUpdate);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating inventory: {ex.Message}");
                
                // For demonstration purposes
                if (_useDirectEndpoint)
                {
                    return true;
                }
                
                return false;
            }
        }

        /// <summary>
        /// Converts BookStorage service Book model to local Book model
        /// </summary>
        private Book ConvertToLocalBookModel(BookServiceReference.Book book)
        {
            if (book == null) return null;

            return new Book
            {
                Id = book.Id,
                Title = book.Title,
                Author = book.Author,
                ISBN = book.ISBN,
                Category = book.Category,
                PublicationYear = book.PublicationYear,
                Publisher = book.Publisher,
                CopiesAvailable = book.CopiesAvailable,
                Description = book.Description,
                CoverImageUrl = book.CoverImageUrl
            };
        }
    }

    /// <summary>
    /// This namespace contains proxy types generated from the service reference
    /// For demonstration purposes, these are defined here
    /// In a real implementation, these would be generated by the service reference
    /// </summary>
    namespace BookServiceReference
    {
        /// <summary>
        /// Book model from the BookStorage service
        /// </summary>
        public class Book
        {
            public string Id { get; set; }
            public string Title { get; set; }
            public string Author { get; set; }
            public string ISBN { get; set; }
            public string Category { get; set; }
            public int PublicationYear { get; set; }
            public string Publisher { get; set; }
            public int CopiesAvailable { get; set; }
            public string Description { get; set; }
            public string CoverImageUrl { get; set; }
        }

        /// <summary>
        /// Inventory update model from the BookStorage service
        /// </summary>
        public class InventoryUpdate
        {
            public string BookId { get; set; }
            public int QuantityChange { get; set; }
        }

        /// <summary>
        /// Client proxy for the BookStorage service
        /// In a real implementation, this would be generated from the service reference
        /// </summary>
        public class BookServiceClient
        {
            private readonly string _endpointConfiguration;

            public BookServiceClient(string endpointConfiguration)
            {
                _endpointConfiguration = endpointConfiguration;
            }

            public Book GetBookById(string id)
            {
                // This would call the actual service
                // For now, we're simulating a response
                return new Book
                {
                    Id = id,
                    Title = "Sample Book",
                    Author = "Sample Author",
                    CopiesAvailable = 10
                };
            }

            public bool UpdateInventory(InventoryUpdate update)
            {
                // This would call the actual service
                // For now, we're simulating success
                return true;
            }

            public List<Book> GetAllBooks()
            {
                // This would call the actual service
                // For now, we're simulating a response
                return new List<Book>
                {
                    new Book { Id = "1", Title = "Sample Book 1", Author = "Author 1", CopiesAvailable = 5 },
                    new Book { Id = "2", Title = "Sample Book 2", Author = "Author 2", CopiesAvailable = 3 }
                };
            }

            public List<Book> GetBooksByCategory(string category)
            {
                // This would call the actual service
                // For now, we're simulating a response
                return new List<Book>
                {
                    new Book { 
                        Id = "1", 
                        Title = "Sample Book in Category", 
                        Author = "Author 1", 
                        Category = category,
                        CopiesAvailable = 5 
                    }
                };
            }
        }
    }
} 